#!/usr/bin/env python
from os import remove, path
import shutil

from setuptools import setup
from distutils.command.clean import clean
from distutils.extension import Extension

# if cythonize is not used - need to use Cython's build_ext
# so it autogenerates the C++ code before compiling
# look into cythonize as well - may require building libpolygon separately
from Cython.Distutils import build_ext
import versioneer


base = path.dirname(__file__)
pkg_dir = 'polygon'

cy_poly_dir = path.join(base, 'polygon')
lib_poly_dir = path.join(base, 'lib_polygon')


class cleandev(clean):
    description = ("cleans files generated by 'develop' mode and files "
                   "autogenerated by cython")

    def run(self):
        '''
        override base class to remove autogenerated cython stuff as well
        '''
        clean.run(self)
        dirs = ['build', pkg_dir + '.egg-info', 'dist']
        for d in dirs:
            try:
                d_full = path.join(base, d)
                shutil.rmtree(d_full)
                print('removed ' + d_full)
            except:
                pass

        # remove auto gen cython files
        auto_gen = ['cy_polygon.so', 'libpolygon.so', 'cy_polygon.cpp']
        for f in auto_gen:
            f_full = path.join(base, 'polygon', f)
            try:
                remove(f_full)
                print('removed ' + f_full)
            except:
                pass


# let's build the lib_polygons separately and link to it
#===============================================================================
# exts = [Extension("polygon.libpolygon",
#                   [path.join(lib_poly_dir, 'polygon.cpp')],
#                   language="c++",
#                   include_dirs=[os.path.join(base, 'lib_polygons')],
#                   )]
#===============================================================================

exts = []
exts.append(Extension("polygon.cy_polygon",
                      [path.join(lib_poly_dir, 'polygon.cpp'),
                       path.join(cy_poly_dir, 'cy_polygon.pyx')],
                      language="c++",
                      include_dirs=[path.join(base, 'polygon'),
                                    lib_poly_dir],
                      # add external libraries for testing only
                      libraries=['z', 'curl'],
                      ))

# tested on Mac OSX (10.10.3), with setuptools 17.1.1, py27_0
# need egg-info folder since package contains compiled code
cmd_class = {'build_ext': build_ext, 'clean': cleandev}
cmd_class.update(versioneer.get_cmdclass())
setup(name=pkg_dir,
      cmdclass=cmd_class,
      entry_points={'console_scripts': ['hello = polygon:hello_polygon']},
      version=versioneer.get_version(),
      description='introduce build error in demo package',
      author="Jasmine Sandhu",
      author_email="jsandhu@continuum.io",
      url="https://github.com/sandhujasmine/CythonExample",
      ext_modules=exts,
      packages=[pkg_dir],
      zip_safe=False)
